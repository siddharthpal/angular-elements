{"version":3,"sources":["webpack:////Users/palsiddh/Documents/personal/blog/angular-elements/libs/todo/src/index.ts","webpack:////Users/palsiddh/Documents/personal/blog/angular-elements/libs/todo/src/lib/todo-wrapper.module.ts","webpack:////Users/palsiddh/Documents/personal/blog/angular-elements/libs/todo/src/lib/todo.module.ts","webpack:////Users/palsiddh/Documents/personal/blog/angular-elements/libs/todo/src/lib/todo/todo.component.css","webpack:////Users/palsiddh/Documents/personal/blog/angular-elements/libs/todo/src/lib/todo/todo.component.ts","webpack:////Users/palsiddh/Documents/personal/blog/angular-elements/libs/todo/src/lib/todo/todo.component.html","webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["export * from './lib/todo-wrapper.module';\n","\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, Injector } from '@angular/core';\nimport { createCustomElement } from '@angular/elements';\nimport { TodoComponent } from './todo/todo.component';\nimport { TodoModule } from './todo.module';\n\n@NgModule({\n    imports: [BrowserModule, TodoModule],\n    entryComponents: [TodoComponent]\n  })\n  export class TodoWrapperModule {\n    constructor(private injector: Injector) {\n      const todoElement = createCustomElement(TodoComponent, {\n        injector: this.injector\n      });\n      customElements.define('todo-root-angular-element', todoElement);\n    }\n  \n    ngDoBootstrap() {}\n  }","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TodoComponent } from './todo/todo.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, FormsModule],\n  declarations: [TodoComponent],\n  exports: [TodoComponent]\n})\nexport class TodoModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsaWJzL3RvZG8vc3JjL2xpYi90b2RvL3RvZG8uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, Input, Output, EventEmitter, NgZone } from '@angular/core';\n\n@Component({\n  selector: 'angular-elements-todo',\n  templateUrl: './todo.component.html',\n  styleUrls: ['./todo.component.css']\n})\nexport class TodoComponent implements OnInit {\n  @Output() addTodoEmitter: EventEmitter<any> = new EventEmitter<any>();\n  @Output() removeTodoEmitter: EventEmitter<any> = new EventEmitter<any>();\n\n\n  newTodo = '';\n  todos = [];\n  constructor(private ngZone: NgZone) {}\n\n  addTodo() {\n    const newTodo = {\n      title: this.newTodo.trim(),\n      completed: false\n    };\n\n    if (!newTodo.title) {\n      return;\n    }\n\n    this.pushTodoItem(newTodo);\n    this.addTodoEmitter.emit(newTodo);\n    this.newTodo = '';\n  }\n  @Input() public pushTodoItem = todo => {\n    this.ngZone.run(() => {\n      this.todos.push(todo);\n    });\n  };\n\n  @Input() public deleteTodoItem = todo => {\n    this.ngZone.run(() => {\n      this.todos = this.todos.filter(t => t.title !== todo.title);\n    });\n  };\n\n  toggle() {}\n\n  delete(todo) {\n    this.removeTodoEmitter.emit(todo);\n    this.todos = this.todos.filter(t => t.title !== todo.title);\n  }\n\n  ngOnInit() {}\n}\n","module.exports = \"<h1>Todo MVC App</h1>\\n<h2>Angular Custom Element</h2>\\n<section class=\\\"todoapp\\\">\\n  <header class=\\\"header\\\">\\n    <h1>todos</h1>\\n    <input class=\\\"new-todo\\\" placeholder=\\\"What needs to be done?\\\" [(ngModel)]=\\\"newTodo\\\" autofocus=\\\"\\\"\\n      (keyup.enter)=\\\"addTodo()\\\">\\n  </header>\\n  <section class=\\\"main\\\" *ngIf=\\\"todos.length\\\">\\n    <ul class=\\\"todo-list\\\">\\n      <li *ngFor=\\\"let todo of todos\\\" [class.completed]=\\\"todo.completed\\\">\\n        <div class=\\\"view\\\">\\n          <label>{{todo.title}}</label>\\n          <button (click)=\\\"delete(todo)\\\" class=\\\"destroy\\\"></button>\\n        </div>\\n      </li>\\n    </ul>\\n  </section>\\n</section>\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { TodoWrapperModule } from '@angular-elements/todo-app';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(TodoWrapperModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}